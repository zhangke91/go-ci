version: 0.1
component: build
timeoutInSeconds: 9000
runAs: root
shell: bash
env:
  variables:
    GO_VERSION: "1.21"
    # OCI Container Registry configuration
    DOCKER_REGISTRY: "sjc.ocir.io"
    DOCKER_REPOSITORY: "${TENANCY_NAMESPACE}/${REPO_NAME}"
    BUILD_TAG: "${OCI_BUILD_RUN_ID}"
  vaultVariables:
    AUTH_TOKEN: ${AUTH_TOKEN_OCID}

steps:
  - type: Command
    name: "Install Go"
    command: |
      curl -O https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz
      tar -xvf go${GO_VERSION}.linux-amd64.tar.gz
      mv go /usr/local
      export PATH=$PATH:/usr/local/go/bin
      go version

  - type: Command
    name: "Download dependencies"
    command: |
      export PATH=$PATH:/usr/local/go/bin
      go mod download

  - type: Command
    name: "Run tests"
    command: |
      export PATH=$PATH:/usr/local/go/bin
      go test -v ./...

  - type: Command
    name: "Build application"
    command: |
      export PATH=$PATH:/usr/local/go/bin
      CGO_ENABLED=0 GOOS=linux go build -o server

  - type: Command
    name: "Build Docker Image"
    command: |
      # Set up repository path with build parameters
      REPO_NAME_LOWER=$(echo "${REPO_NAME}" | tr '[:upper:]' '[:lower:]')
      TENANCY_LOWER=$(echo "${TENANCY_NAMESPACE}" | tr '[:upper:]' '[:lower:]')
      FULL_REPO_PATH="${DOCKER_REGISTRY}/${TENANCY_LOWER}/${REPO_NAME_LOWER}:${BUILD_TAG}"
      
      # Debug output
      echo "Using repository path: ${FULL_REPO_PATH}"
      
      # Build only
      docker build -t "${FULL_REPO_PATH}" . || exit 1

outputArtifacts:
  - name: application
    type: BINARY
    location: server
  - name: docker-image
    type: DOCKER_IMAGE
    location: ${DOCKER_REGISTRY}/${TENANCY_NAMESPACE}/${REPO_NAME}:${BUILD_TAG} 